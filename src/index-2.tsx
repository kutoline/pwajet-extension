/**
 * This is example of consuming components by other extensions
 * index.ts - is a provider and index-2 is a consumer
 */
import React from 'react'
import pwajet from 'pwajet'

/**
 * Import types generated by `yarn emit-types`
 * We can use now noname-example-addon`s api as typed module
 */
import type nonameExampleAddon from 'noname-example-addon'

/**
 * We can wrap our ConsumerComponent with this
 * to defer a render until provider`s api will be accessible
 */
const ConsumerComponent = React.lazy(async () => {
  const componentImport = await import('./components/consumer-component/ConsumerComponent')

  /**
   * For example, we should use functions from provider`s api: doAJob
   * Provider`s api can be called only in async mode
   * So our consumer component should wait for it
   */
  const api = await pwajet.core.extensionApiService.getApi<typeof nonameExampleAddon>('noname-example-addon')
  const Component = componentImport.default
  const module = api ? () => <Component helloText={api.utils.doAJob()} /> : () => null

  return {default: module}
})

pwajet.core.renderSubscriber.on(
  'render-element.pwajet-extension-example.component/Component',
  (subscriber) => {
    subscriber.insertAfter('.b-component__header', () => {
      return (
        <>
          This text was inserted into first extension by second extension
          <React.Suspense fallback='loading ConsumerComponent and wait for noname-example-addon`s api'>
            <ConsumerComponent />
          </React.Suspense>
        </>
      )
    })
  }
)
